{"ast":null,"code":"import axios from 'axios';\nimport { ITINERARY_REQUEST, ITINERARY_REQUEST_SUCCESS, ITINERARY_REQUEST_FAIL } from '../types/ItinerariesTypes';\nexport const getItinerary = values => async dispatch => {\n  dispatch({\n    type: ITINERARY_REQUEST\n  });\n\n  try {\n    const {\n      data\n    } = await axios.post(\"https://api.digitransit.fi/routing/v1/routers/finland/index/graphql\", {\n      query: `{\n                plan(\n                  fromPlace: \"${values.originLatLon.name}, ${values.originLatLon.locality}::${values.originLatLon.lat},${vslues.originLatLan.lon}\",\n                  toPlace: \"Pisa, Espoo::60.175294,24.684855\",\n                ) {\n                  itineraries{\n                    walkDistance,\n                    duration,\n                    legs {\n                      mode\n                      startTime\n                      endTime\n                      from {\n                        lat\n                        lon\n                        name\n                        stop {\n                          code\n                          name\n                        }\n                      },\n                      to {\n                        lat\n                        lon\n                        name\n                      },\n                      agency {\n                        gtfsId\n                                name\n                      },\n                      distance\n                      legGeometry {\n                        length\n                        points\n                      }\n                    }\n                  }\n                }\n              }\n            )\n        }`\n    });\n    dispatch({\n      type: ITINERARY_REQUEST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ITINERARY_REQUEST_FAIL,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/home/mrmilul/Documents/WebProg/trial assignment/trail/src/redux/actions/ItinerariesAction.js"],"names":["axios","ITINERARY_REQUEST","ITINERARY_REQUEST_SUCCESS","ITINERARY_REQUEST_FAIL","getItinerary","values","dispatch","type","data","post","query","originLatLon","name","locality","lat","vslues","originLatLan","lon","payload","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,iBADJ,EAEIC,yBAFJ,EAGIC,sBAHJ,QAIO,2BAJP;AAOA,OAAO,MAAMC,YAAY,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;AACxDA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEN;AADD,GAAD,CAAR;;AAIA,MAAI;AACA,UAAM;AAAEO,MAAAA;AAAF,QAAW,MAAMR,KAAK,CAACS,IAAN,CAAW,qEAAX,EAGnB;AACIC,MAAAA,KAAK,EAAG;AACxB;AACA,gCAAgCL,MAAM,CAACM,YAAP,CAAoBC,IAAK,KAAIP,MAAM,CAACM,YAAP,CAAoBE,QAAS,KAAIR,MAAM,CAACM,YAAP,CAAoBG,GAAI,IAAGC,MAAM,CAACC,YAAP,CAAoBC,GAAI;AACjJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzCY,KAHmB,CAAvB;AAgDAX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,yBADD;AAELgB,MAAAA,OAAO,EAACV;AAFH,KAAD,CAAR;AAIH,GArDD,CAqDE,OAAOW,KAAP,EAAc;AACZb,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEJ,sBADD;AAELe,MAAAA,OAAO,EAAEC;AAFJ,KAAD,CAAR;AAIH;AACJ,CAhEM","sourcesContent":["import axios from 'axios'\nimport {\n    ITINERARY_REQUEST,\n    ITINERARY_REQUEST_SUCCESS,\n    ITINERARY_REQUEST_FAIL\n} from '../types/ItinerariesTypes'\n\n\nexport const getItinerary = (values) => async (dispatch) => {\n    dispatch({\n        type: ITINERARY_REQUEST\n    })\n\n    try {\n        const { data } = await axios.post(\"https://api.digitransit.fi/routing/v1/routers/finland/index/graphql\",\n\n\n            {\n                query: `{\n                plan(\n                  fromPlace: \"${values.originLatLon.name}, ${values.originLatLon.locality}::${values.originLatLon.lat},${vslues.originLatLan.lon}\",\n                  toPlace: \"Pisa, Espoo::60.175294,24.684855\",\n                ) {\n                  itineraries{\n                    walkDistance,\n                    duration,\n                    legs {\n                      mode\n                      startTime\n                      endTime\n                      from {\n                        lat\n                        lon\n                        name\n                        stop {\n                          code\n                          name\n                        }\n                      },\n                      to {\n                        lat\n                        lon\n                        name\n                      },\n                      agency {\n                        gtfsId\n                                name\n                      },\n                      distance\n                      legGeometry {\n                        length\n                        points\n                      }\n                    }\n                  }\n                }\n              }\n            )\n        }`\n            }\n        )\n\n        dispatch({\n            type: ITINERARY_REQUEST_SUCCESS,\n            payload:data\n        })\n    } catch (error) {\n        dispatch({\n            type: ITINERARY_REQUEST_FAIL,\n            payload: error\n        })\n    }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}