{"ast":null,"code":"var _jsxFileName = \"/home/mrmilul/Documents/WebProg/trial assignment/trail/src/components/Screen/TimetableScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TimetableScreen = () => {\n  _s();\n\n  const [originLatLan, setOriginLatLon] = useState({});\n  const [destinationLatLan, setDestinationLatLon] = useState({});\n  const bigData = useSelector(state => state.addressReducer);\n  const {\n    loading,\n    data,\n    error\n  } = bigData;\n\n  const clickHandler = () => {\n    setOriginLatLon({\n      name: data[0].data.features[0].properties.name,\n      locality: data[0].data.features[0].properties.locality,\n      lon: data[0].data.features[0].geometry.coordinates[0],\n      lat: data[0].data.features[0].geometry.coordinates[1]\n    });\n    setDestinationLatLon({\n      name: data[1].data.features[0].properties.name,\n      locality: data[1].data.features[0].properties.locality,\n      lon: data[1].data.features[0].geometry.coordinates[0],\n      lat: data[1].data.features[0].geometry.coordinates[1]\n    });\n  };\n\n  const clickHandler1 = () => {\n    console.log(originLatLan.name);\n    console.log(destinationLatLan);\n  };\n\n  const clickHandler2 = () => {\n    const result = axios.post(\"https://api.digitransit.fi/graphiql/hsl\", {\n      query: `{\n                    plan(\n                      fromPlace: \"Kamppi, Helsinki::60.168992,24.932366\",\n                      toPlace: \"Pisa, Espoo::60.175294,24.684855\",\n                    ) {\n                      itineraries{\n                        walkDistance,\n                        duration,\n                        legs {\n                          mode\n                          startTime\n                          endTime\n                          from {\n                            lat\n                            lon\n                            name\n                            stop {\n                              code\n                              name\n                            }\n                          },\n                          to {\n                            lat\n                            lon\n                            name\n                          },\n                          agency {\n                            gtfsId\n                                    name\n                          },\n                          distance\n                          legGeometry {\n                            length\n                            points\n                          }\n                        }\n                      }\n                    }\n                  }\n                )\n            }`\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler,\n      children: \"finde\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler1,\n      children: \"log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler2,\n      children: \"fetch graphql\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TimetableScreen, \"7Dlq2G7vHLqSnr3UpzH+SerPT18=\", false, function () {\n  return [useSelector];\n});\n\n_c = TimetableScreen;\nexport default TimetableScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimetableScreen\");","map":{"version":3,"sources":["/home/mrmilul/Documents/WebProg/trial assignment/trail/src/components/Screen/TimetableScreen.js"],"names":["React","useState","useSelector","axios","TimetableScreen","originLatLan","setOriginLatLon","destinationLatLan","setDestinationLatLon","bigData","state","addressReducer","loading","data","error","clickHandler","name","features","properties","locality","lon","geometry","coordinates","lat","clickHandler1","console","log","clickHandler2","result","post","query"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport axios from 'axios'\n\nconst TimetableScreen = () => {\n    const [originLatLan, setOriginLatLon] = useState({})\n    const [destinationLatLan, setDestinationLatLon] = useState({})\n\n    const bigData = useSelector(state => state.addressReducer)\n    const { loading, data, error } = bigData\n\n    const clickHandler = () => {\n        setOriginLatLon({\n            name:data[0].data.features[0].properties.name,\n            locality:data[0].data.features[0].properties.locality,\n            lon: data[0].data.features[0].geometry.coordinates[0],\n            lat: data[0].data.features[0].geometry.coordinates[1]\n        })\n        setDestinationLatLon({\n            name:data[1].data.features[0].properties.name,\n            locality:data[1].data.features[0].properties.locality,\n            lon: data[1].data.features[0].geometry.coordinates[0],\n            lat: data[1].data.features[0].geometry.coordinates[1]\n        })\n  \n    }\n    const clickHandler1 = ()=>{\n        console.log(originLatLan.name)\n        console.log(destinationLatLan)\n    }\n    const clickHandler2 = ()=>{\n        const result = axios.post(\"https://api.digitransit.fi/graphiql/hsl\",\n            {\n                query: `{\n                    plan(\n                      fromPlace: \"Kamppi, Helsinki::60.168992,24.932366\",\n                      toPlace: \"Pisa, Espoo::60.175294,24.684855\",\n                    ) {\n                      itineraries{\n                        walkDistance,\n                        duration,\n                        legs {\n                          mode\n                          startTime\n                          endTime\n                          from {\n                            lat\n                            lon\n                            name\n                            stop {\n                              code\n                              name\n                            }\n                          },\n                          to {\n                            lat\n                            lon\n                            name\n                          },\n                          agency {\n                            gtfsId\n                                    name\n                          },\n                          distance\n                          legGeometry {\n                            length\n                            points\n                          }\n                        }\n                      }\n                    }\n                  }\n                )\n            }`\n            }\n        )\n    }\n    return (\n        <div>\n            <button onClick={clickHandler}>finde</button>\n            <button onClick={clickHandler1}>log</button>\n            <button onClick={clickHandler2}>fetch graphql</button>\n\n        </div>\n    )\n}\n\nexport default TimetableScreen\n"]},"metadata":{},"sourceType":"module"}