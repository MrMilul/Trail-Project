{"ast":null,"code":"var _jsxFileName = \"/home/mrmilul/Documents/WebProg/trial assignment/trail/src/components/Screen/TestComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete';\nimport { getAddress } from '../../redux/actions/AddressCompAction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TestComponent = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [items, setItems] = useState([]);\n  const allData = useSelector(state => state.addressReducer);\n  const {\n    loading,\n    error,\n    data\n  } = allData;\n\n  if (Object.keys(data) !== 0) {}\n\n  setItems(data.map(x => {\n    return x.properties;\n  }));\n  console.log(items);\n\n  const handleOnSearch = (string, results) => {\n    dispatch(getAddress(string));\n  }; // const handleOnSelect = (item) => {\n  //   // the item selected\n  //   console.log(item)\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 400\n      },\n      children: /*#__PURE__*/_jsxDEV(ReactSearchAutocomplete, {\n        items: items,\n        onSearch: handleOnSearch // onSelect={handleOnSelect}\n        ,\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 11\n  }, this);\n};\n\n_s(TestComponent, \"uZfx4V5JA4x0XHMUbORZQfrDXc0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = TestComponent;\nexport default TestComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestComponent\");","map":{"version":3,"sources":["/home/mrmilul/Documents/WebProg/trial assignment/trail/src/components/Screen/TestComponent.js"],"names":["React","useState","useSelector","useDispatch","ReactSearchAutocomplete","getAddress","TestComponent","dispatch","items","setItems","allData","state","addressReducer","loading","error","data","Object","keys","map","x","properties","console","log","handleOnSearch","string","results","width"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAASC,UAAT,QAA2B,uCAA3B;;;AAGA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC1B,QAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMS,OAAO,GAAGR,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,cAAhB,CAA3B;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BL,OAAjC;;AACA,MAAGM,MAAM,CAACC,IAAP,CAAYF,IAAZ,MAAsB,CAAzB,EAA2B,CAE1B;;AACDN,EAAAA,QAAQ,CAACM,IAAI,CAACG,GAAL,CAASC,CAAC,IAAI;AAAE,WAAOA,CAAC,CAACC,UAAT;AAAqB,GAArC,CAAD,CAAR;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;;AAEA,QAAMe,cAAc,GAAG,CAACC,MAAD,EAASC,OAAT,KAAqB;AAC1ClB,IAAAA,QAAQ,CAACF,UAAU,CAACmB,MAAD,CAAX,CAAR;AAED,GAHD,CAX0B,CAgB1B;AACA;AACA;AACA;;;AAIA,sBAAQ;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BAEN;AAAK,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAE;AAAT,OAAZ;AAAA,6BACE,QAAC,uBAAD;AACE,QAAA,KAAK,EAAElB,KADT;AAEE,QAAA,QAAQ,EAAEe,cAFZ,CAGE;AAHF;AAIE,QAAA,SAAS;AAJX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFM;AAAA;AAAA;AAAA;AAAA,UAAR;AAaD,CApCD;;GAAMjB,a;UACaH,W,EAEDD,W;;;KAHZI,a;AAsCN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { ReactSearchAutocomplete } from 'react-search-autocomplete'\nimport { getAddress } from '../../redux/actions/AddressCompAction'\n\n\nconst TestComponent = () => {\n  const dispatch = useDispatch()\n  const [items, setItems] = useState([])\n  const allData = useSelector(state => state.addressReducer)\n  const { loading, error, data } = allData\n  if(Object.keys(data) !== 0){\n\n  }\n  setItems(data.map(x => { return x.properties }))\n  console.log(items)\n\n  const handleOnSearch = (string, results) => {\n    dispatch(getAddress(string))\n\n  }\n\n  // const handleOnSelect = (item) => {\n  //   // the item selected\n  //   console.log(item)\n  // }\n\n\n\n  return (<div className=\"App\">\n\n    <div style={{ width: 400 }}>\n      <ReactSearchAutocomplete\n        items={items}\n        onSearch={handleOnSearch}\n        // onSelect={handleOnSelect}\n        autoFocus\n      />\n    </div>\n\n  </div>\n  )\n}\n\nexport default TestComponent"]},"metadata":{},"sourceType":"module"}