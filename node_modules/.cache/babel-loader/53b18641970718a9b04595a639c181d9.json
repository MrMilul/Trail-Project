{"ast":null,"code":"var _jsxFileName = \"/home/mrmilul/Documents/WebProg/trial assignment/trail/src/components/Screen/InputScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAddress } from \"../../redux/actions/AddressCompAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InputScreen = () => {\n  _s();\n\n  const [origin, setOrigin] = useState();\n  const [destinitaion, setDestination] = useState();\n  const [originLatLan, setOriginLatLan] = useState({});\n  const [destinationLatLan, setDestinationLatLan] = useState({});\n  const bigData = useSelector(state => state.addressReducer);\n  const {\n    loading,\n    error,\n    data\n  } = bigData;\n  const dispatch = useDispatch();\n\n  const onChangeHandler1 = key => {\n    setOrigin(key);\n  };\n\n  const clickHandler = () => {\n    // dispatch(getAddress(origin))\n    console.log(Object.keys(data));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-layout\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => onChangeHandler1(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clickHandler,\n      children: \"click\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InputScreen, \"6PkTh3YzNdnDldoJfF5ZHoqEHYA=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = InputScreen;\nexport default InputScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputScreen\");","map":{"version":3,"sources":["/home/mrmilul/Documents/WebProg/trial assignment/trail/src/components/Screen/InputScreen.js"],"names":["React","useState","useEffect","useSelector","useDispatch","getAddress","InputScreen","origin","setOrigin","destinitaion","setDestination","originLatLan","setOriginLatLan","destinationLatLan","setDestinationLatLan","bigData","state","addressReducer","loading","error","data","dispatch","onChangeHandler1","key","clickHandler","console","log","Object","keys","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,uCAA3B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,EAApC;AACA,QAAM,CAACQ,YAAD,EAAeC,cAAf,IAAiCT,QAAQ,EAA/C;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACY,iBAAD,EAAoBC,oBAApB,IAA4Cb,QAAQ,CAAC,EAAD,CAA1D;AAGA,QAAMc,OAAO,GAAGZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACC,cAAhB,CAA3B;AACA,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBL,OAA/B;AAEA,QAAMM,QAAQ,GAAGjB,WAAW,EAA5B;;AACA,QAAMkB,gBAAgB,GAAIC,GAAD,IAAS;AAC9Bf,IAAAA,SAAS,CAACe,GAAD,CAAT;AACH,GAFD;;AAGA,QAAMC,YAAY,GAAG,MAAI;AACrB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYC,MAAM,CAACC,IAAP,CAAYR,IAAZ,CAAZ;AACH,GAHD;;AAIA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGS,CAAD,IAAOP,gBAAgB,CAACO,CAAC,CAACC,MAAF,CAASC,KAAV;AAApD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAEP,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAzBD;;GAAMlB,W;UAOcH,W,EAGCC,W;;;KAVfE,W;AA2BN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getAddress } from \"../../redux/actions/AddressCompAction\"\n\nconst InputScreen = () => {\n    const [origin, setOrigin] = useState()\n    const [destinitaion, setDestination] = useState()\n    const [originLatLan, setOriginLatLan] = useState({})\n    const [destinationLatLan, setDestinationLatLan] = useState({})\n\n\n    const bigData = useSelector(state => state.addressReducer)\n    const {loading, error, data} = bigData\n\n    const dispatch = useDispatch()\n    const onChangeHandler1 = (key) => {\n        setOrigin(key)\n    }\n    const clickHandler = ()=>{\n        // dispatch(getAddress(origin))\n        console.log(Object.keys(data))\n    }\n    return (\n        <div className=\"input-layout\">\n            <input type=\"text\" onChange={(e) => onChangeHandler1(e.target.value)} />\n            <button onClick={clickHandler}>click</button>\n         \n        </div>\n    )\n}\n\nexport default InputScreen\n"]},"metadata":{},"sourceType":"module"}