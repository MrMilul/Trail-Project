{"ast":null,"code":"var _jsxFileName = \"/home/mrmilul/Documents/WebProg/trial assignment/trail/src/components/Screen/InputScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getAddress } from \"../../redux/actions/AddressCompAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InputScreen = () => {\n  _s();\n\n  const [origin, setOrigen] = useState();\n  const [destinitaion, setDestination] = useState();\n  const [originLatLan, setOriginLatLan] = useState({});\n  const [destinationLatLan, setDestinationLatLan] = useState({});\n  const bigData = useSelector(state => state.addressReducer);\n  const {\n    loading,\n    error,\n    data\n  } = bigData;\n  const dispatch = useDispatch();\n\n  const onChangeHandler1 = key => {\n    setOrigen(key);\n\n    if (Object.keys(bigData).length > 1) {\n      setOriginLatLan({\n        lat: data.features[0].geometry.coordinates[0],\n        lan: data.features[0].geometry.coordinates[1]\n      });\n    }\n  };\n\n  const onChangeHandler2 = key => {\n    setDestination(key);\n\n    if (Object.keys(bigData).length > 1) {\n      setDestinationLatLan({\n        lat: data.features[0].geometry.coordinates[0],\n        lan: data.features[0].geometry.coordinates[1]\n      });\n    }\n  };\n\n  useEffect(() => {\n    dispatch(getAddress(origin));\n    dispatch(getAddress(destinitaion));\n  }, [dispatch, origin, destinitaion]); // const clickhandler = ()=>{\n  //     console.log(Object.keys(bigData).length)\n  //     console.log( originLatLan)\n  //     console.log(destinationLatLan)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-layout\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => onChangeHandler1(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => onChangeHandler2(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InputScreen, \"7qj4eyktmRvxE6s/VhO+3umAGGA=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = InputScreen;\nexport default InputScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputScreen\");","map":{"version":3,"sources":["/home/mrmilul/Documents/WebProg/trial assignment/trail/src/components/Screen/InputScreen.js"],"names":["React","useState","useEffect","useSelector","useDispatch","getAddress","InputScreen","origin","setOrigen","destinitaion","setDestination","originLatLan","setOriginLatLan","destinationLatLan","setDestinationLatLan","bigData","state","addressReducer","loading","error","data","dispatch","onChangeHandler1","key","Object","keys","length","lat","features","geometry","coordinates","lan","onChangeHandler2","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,uCAA3B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,EAApC;AACA,QAAM,CAACQ,YAAD,EAAeC,cAAf,IAAiCT,QAAQ,EAA/C;AACA,QAAM,CAACU,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACY,iBAAD,EAAoBC,oBAApB,IAA4Cb,QAAQ,CAAC,EAAD,CAA1D;AAGA,QAAMc,OAAO,GAAGZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACC,cAAhB,CAA3B;AACA,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBL,OAA/B;AAEA,QAAMM,QAAQ,GAAGjB,WAAW,EAA5B;;AACA,QAAMkB,gBAAgB,GAAIC,GAAD,IAAS;AAC9Bf,IAAAA,SAAS,CAACe,GAAD,CAAT;;AACA,QAAGC,MAAM,CAACC,IAAP,CAAYV,OAAZ,EAAqBW,MAArB,GAA8B,CAAjC,EAAmC;AAC/Bd,MAAAA,eAAe,CAAC;AACZe,QAAAA,GAAG,EAAEP,IAAI,CAACQ,QAAL,CAAc,CAAd,EAAiBC,QAAjB,CAA0BC,WAA1B,CAAsC,CAAtC,CADO;AAEZC,QAAAA,GAAG,EAACX,IAAI,CAACQ,QAAL,CAAc,CAAd,EAAiBC,QAAjB,CAA0BC,WAA1B,CAAsC,CAAtC;AAFQ,OAAD,CAAf;AAIH;AAEJ,GATD;;AAUA,QAAME,gBAAgB,GAAIT,GAAD,IAAS;AAC9Bb,IAAAA,cAAc,CAACa,GAAD,CAAd;;AACA,QAAGC,MAAM,CAACC,IAAP,CAAYV,OAAZ,EAAqBW,MAArB,GAA8B,CAAjC,EAAmC;AAC/BZ,MAAAA,oBAAoB,CAAC;AACjBa,QAAAA,GAAG,EAAEP,IAAI,CAACQ,QAAL,CAAc,CAAd,EAAiBC,QAAjB,CAA0BC,WAA1B,CAAsC,CAAtC,CADY;AAEjBC,QAAAA,GAAG,EAACX,IAAI,CAACQ,QAAL,CAAc,CAAd,EAAiBC,QAAjB,CAA0BC,WAA1B,CAAsC,CAAtC;AAFa,OAAD,CAApB;AAIH;AAGJ,GAVD;;AAWA5B,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,QAAQ,CAAChB,UAAU,CAACE,MAAD,CAAX,CAAR;AACAc,IAAAA,QAAQ,CAAChB,UAAU,CAACI,YAAD,CAAX,CAAR;AAEH,GAJQ,EAIN,CAACY,QAAD,EAAUd,MAAV,EAAkBE,YAAlB,CAJM,CAAT,CAhCsB,CAsCtB;AAEA;AACA;AACA;AAEA;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGwB,CAAD,IAAOX,gBAAgB,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV;AAApD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGF,CAAD,IAAOD,gBAAgB,CAACC,CAAC,CAACC,MAAF,CAASC,KAAV;AAApD;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CApDD;;GAAM7B,W;UAOcH,W,EAGCC,W;;;KAVfE,W;AAsDN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getAddress } from \"../../redux/actions/AddressCompAction\"\n\nconst InputScreen = () => {\n    const [origin, setOrigen] = useState()\n    const [destinitaion, setDestination] = useState()\n    const [originLatLan, setOriginLatLan] = useState({})\n    const [destinationLatLan, setDestinationLatLan] = useState({})\n\n\n    const bigData = useSelector(state => state.addressReducer)\n    const {loading, error, data} = bigData\n\n    const dispatch = useDispatch()\n    const onChangeHandler1 = (key) => {\n        setOrigen(key)\n        if(Object.keys(bigData).length > 1){\n            setOriginLatLan({\n                lat: data.features[0].geometry.coordinates[0],\n                lan:data.features[0].geometry.coordinates[1]\n            })\n        }\n        \n    }\n    const onChangeHandler2 = (key) => {\n        setDestination(key)\n        if(Object.keys(bigData).length > 1){\n            setDestinationLatLan({\n                lat: data.features[0].geometry.coordinates[0],\n                lan:data.features[0].geometry.coordinates[1]\n            })\n        }\n        \n        \n    }\n    useEffect(() => {\n        dispatch(getAddress(origin))\n        dispatch(getAddress(destinitaion))\n\n    }, [dispatch,origin, destinitaion])\n\n    // const clickhandler = ()=>{\n         \n    //     console.log(Object.keys(bigData).length)\n    //     console.log( originLatLan)\n    //     console.log(destinationLatLan)\n       \n    // }\n    return (\n        <div className=\"input-layout\">\n            <input type=\"text\" onChange={(e) => onChangeHandler1(e.target.value)} />\n            <input type=\"text\" onChange={(e) => onChangeHandler2(e.target.value)} />\n            {/* <button onClick={clickhandler}>click</button> */}\n        </div>\n    )\n}\n\nexport default InputScreen\n"]},"metadata":{},"sourceType":"module"}