{"ast":null,"code":"import axios from \"axios\";\nimport { ADDRESS_REQUEST, ADDRESS_REQUEST_SUCCESS, ADDRESS_REQUEST_FAIL } from \"../types/AddressType\";\nexport const getAddress = values => async dispatch => {\n  dispatch({\n    type: ADDRESS_REQUEST,\n    payload: values.departure\n  });\n\n  try {\n    const reqOne = axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${values.firstAddress}&size=1`);\n    const reqTwo = axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${values.secondAddress}%2016&size=1`);\n    const { ...data\n    } = await axios.all([reqOne, reqTwo]);\n    dispatch({\n      type: ADDRESS_REQUEST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ADDRESS_REQUEST_FAIL,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/home/mrmilul/Documents/WebProg/trial assignment/trail/src/redux/actions/AddressCompAction.js"],"names":["axios","ADDRESS_REQUEST","ADDRESS_REQUEST_SUCCESS","ADDRESS_REQUEST_FAIL","getAddress","values","dispatch","type","payload","departure","reqOne","get","firstAddress","reqTwo","secondAddress","data","all","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,eADJ,EAEIC,uBAFJ,EAGIC,oBAHJ,QAIO,sBAJP;AAOA,OAAO,MAAMC,UAAU,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;AAEtDA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEN,eADD;AAELO,IAAAA,OAAO,EAAEH,MAAM,CAACI;AAFX,GAAD,CAAR;;AAIA,MAAI;AAAC,UAAMC,MAAM,GAAGV,KAAK,CAACW,GAAN,CAAW,uDAAsDN,MAAM,CAACO,YAAa,SAArF,CAAf;AACL,UAAMC,MAAM,GAAGb,KAAK,CAACW,GAAN,CAAW,uDAAsDN,MAAM,CAACS,aAAc,cAAtF,CAAf;AAEI,UAAM,EAAE,GAAGC;AAAL,QAAc,MAAMf,KAAK,CAACgB,GAAN,CAAU,CAACN,MAAD,EAASG,MAAT,CAAV,CAA1B;AAEAP,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,uBADD;AAELM,MAAAA,OAAO,EAAEO;AAFJ,KAAD,CAAR;AAKH,GAVD,CAUE,OAAOE,KAAP,EAAc;AACZX,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEJ,oBADD;AAELK,MAAAA,OAAO,EAAES;AAFJ,KAAD,CAAR;AAIH;AACJ,CAtBM","sourcesContent":["import axios from \"axios\"\n\nimport {\n    ADDRESS_REQUEST,\n    ADDRESS_REQUEST_SUCCESS,\n    ADDRESS_REQUEST_FAIL\n} from \"../types/AddressType\"\n\n\nexport const getAddress = (values) => async (dispatch) => {\n\n    dispatch({\n        type: ADDRESS_REQUEST,\n        payload: values.departure\n    })\n    try {const reqOne = axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${values.firstAddress}&size=1`);\n    const reqTwo = axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${values.secondAddress}%2016&size=1`);\n    \n        const { ...data } = await axios.all([reqOne, reqTwo])\n\n        dispatch({\n            type: ADDRESS_REQUEST_SUCCESS,\n            payload: data\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ADDRESS_REQUEST_FAIL,\n            payload: error\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}