{"ast":null,"code":"var _jsxFileName = \"/home/mrmilul/Documents/WebProg/trial assignment/trail/src/components/Screen/InputScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getAddress } from \"../../redux/actions/AddressCompAction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InputScreen = () => {\n  _s();\n\n  const [firstAddress, setFirstAddress] = useState();\n  const [secondAddress, setSecondAddress] = useState();\n  const [departure, setDeparture] = useState({\n    date: new Date().toISOString().slice(0, 10),\n    time: new Date().toLocaleTimeString('en-GB').slice(0, 7)\n  });\n  const dispatch = useDispatch();\n\n  const onChangeHandler1 = value => {\n    setFirstAddress(value);\n  };\n\n  const onChangeHandler2 = value => {\n    setSecondAddress(value);\n  };\n\n  const clickHandler = () => {\n    let vaules = {\n      firstAddress,\n      secondAddress,\n      departure\n    };\n    dispatch(getAddress(vaules));\n  };\n\n  let vaules = {\n    firstAddress,\n    secondAddress,\n    departure\n  };\n  console.log(vaules);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-layout\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => onChangeHandler1(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: e => onChangeHandler2(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-8\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: departure.date,\n          onChange: e => {\n            setDeparture({\n              date: e.target.value\n            });\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-4\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"time\",\n          value: departure.time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"btn btn-outline-info btn-lg btn-block\",\n      onClick: clickHandler,\n      children: \"Find Best Trip\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InputScreen, \"Zv7ItPIecPHsQUwTsrRLT20odMc=\", false, function () {\n  return [useDispatch];\n});\n\n_c = InputScreen;\nexport default InputScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputScreen\");","map":{"version":3,"sources":["/home/mrmilul/Documents/WebProg/trial assignment/trail/src/components/Screen/InputScreen.js"],"names":["React","useState","useEffect","useDispatch","getAddress","InputScreen","firstAddress","setFirstAddress","secondAddress","setSecondAddress","departure","setDeparture","date","Date","toISOString","slice","time","toLocaleTimeString","dispatch","onChangeHandler1","value","onChangeHandler2","clickHandler","vaules","console","log","e","target"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,UAAT,QAA2B,uCAA3B;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,EAAhD;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCR,QAAQ,EAAlD;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC;AACvCW,IAAAA,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,CAA/B,EAAkC,EAAlC,CADiC;AAEvCC,IAAAA,IAAI,EAAE,IAAIH,IAAJ,GAAWI,kBAAX,CAA8B,OAA9B,EAAuCF,KAAvC,CAA6C,CAA7C,EAAgD,CAAhD;AAFiC,GAAD,CAA1C;AAMA,QAAMG,QAAQ,GAAGf,WAAW,EAA5B;;AAGA,QAAMgB,gBAAgB,GAAIC,KAAD,IAAW;AAChCb,IAAAA,eAAe,CAACa,KAAD,CAAf;AACH,GAFD;;AAGA,QAAMC,gBAAgB,GAAID,KAAD,IAAW;AAChCX,IAAAA,gBAAgB,CAACW,KAAD,CAAhB;AACH,GAFD;;AAKA,QAAME,YAAY,GAAG,MAAM;AACvB,QAAIC,MAAM,GAAG;AACTjB,MAAAA,YADS;AAETE,MAAAA,aAFS;AAGTE,MAAAA;AAHS,KAAb;AAKAQ,IAAAA,QAAQ,CAACd,UAAU,CAACmB,MAAD,CAAX,CAAR;AAEH,GARD;;AASA,MAAIA,MAAM,GAAG;AACTjB,IAAAA,YADS;AAETE,IAAAA,aAFS;AAGTE,IAAAA;AAHS,GAAb;AAKAc,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGG,CAAD,IAAOP,gBAAgB,CAACO,CAAC,CAACC,MAAF,CAASP,KAAV;AAApD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGM,CAAD,IAAOL,gBAAgB,CAACK,CAAC,CAACC,MAAF,CAASP,KAAV;AAApD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,KAAK,EAAEV,SAAS,CAACE,IAApC;AAA0C,UAAA,QAAQ,EAAGc,CAAD,IAAK;AAACf,YAAAA,YAAY,CAAC;AAACC,cAAAA,IAAI,EAACc,CAAC,CAACC,MAAF,CAASP;AAAf,aAAD,CAAZ;AAAoC;AAA9F;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,+BACQ;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,KAAK,EAAEV,SAAS,CAACM;AAApC;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAWI;AAAQ,MAAA,IAAI,EAAC,QAAb;AACI,MAAA,SAAS,EAAC,uCADd;AAEI,MAAA,OAAO,EAAEM,YAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CApDD;;GAAMjB,W;UASeF,W;;;KATfE,W;AAsDN,eAAeA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { getAddress } from \"../../redux/actions/AddressCompAction\"\n\nconst InputScreen = () => {\n    const [firstAddress, setFirstAddress] = useState()\n    const [secondAddress, setSecondAddress] = useState()\n    const [departure, setDeparture] = useState({\n        date: new Date().toISOString().slice(0, 10),\n        time: new Date().toLocaleTimeString('en-GB').slice(0, 7)\n    })\n\n\n    const dispatch = useDispatch()\n\n\n    const onChangeHandler1 = (value) => {\n        setFirstAddress(value)\n    }\n    const onChangeHandler2 = (value) => {\n        setSecondAddress(value)\n    }\n\n\n    const clickHandler = () => {\n        let vaules = {\n            firstAddress,\n            secondAddress,\n            departure\n        }\n        dispatch(getAddress(vaules))\n\n    }\n    let vaules = {\n        firstAddress,\n        secondAddress,\n        departure\n    }\n    console.log(vaules)\n    return (\n        <div className=\"input-layout\">\n            <input type=\"text\" onChange={(e) => onChangeHandler1(e.target.value)} />\n            <input type=\"text\" onChange={(e) => onChangeHandler2(e.target.value)} />\n            <div className=\"row\">\n                <div className=\"col-8\">\n                    <input type=\"date\" value={departure.date} onChange={(e)=>{setDeparture({date:e.target.value})}}/>\n                </div>\n                <div className=\"col-4\">\n                        <input type=\"time\" value={departure.time}/>\n                </div>\n            </div>\n            <button type=\"button\"\n                className=\"btn btn-outline-info btn-lg btn-block\"\n                onClick={clickHandler}>Find Best Trip</button>\n        </div>\n    )\n}\n\nexport default InputScreen\n"]},"metadata":{},"sourceType":"module"}