{"ast":null,"code":"import axios from \"axios\";\nimport { ADDRESS_REQUEST, ADDRESS_REQUEST_SUCCESS, ADDRESS_REQUEST_FAIL } from \"../types/AddressType\";\nexport const getAddress = values => async dispatch => {\n  dispatch({\n    type: ADDRESS_REQUEST,\n    payload: values.departure\n  }); // try {const reqOne = axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${firstAddress}&size=1`);\n  // const reqTwo = axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${secondAddress}%2016&size=1`);\n  //     const { ...data } = await axios.all([reqOne, reqTwo])\n  //     dispatch({\n  //         type: ADDRESS_REQUEST_SUCCESS,\n  //         payload: data\n  //     })\n  // } catch (error) {\n  //     dispatch({\n  //         type: ADDRESS_REQUEST_FAIL,\n  //         payload: error\n  //     })\n  // }\n};","map":{"version":3,"sources":["/home/mrmilul/Documents/WebProg/trial assignment/trail/src/redux/actions/AddressCompAction.js"],"names":["axios","ADDRESS_REQUEST","ADDRESS_REQUEST_SUCCESS","ADDRESS_REQUEST_FAIL","getAddress","values","dispatch","type","payload","departure"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,eADJ,EAEIC,uBAFJ,EAGIC,oBAHJ,QAIO,sBAJP;AAOA,OAAO,MAAMC,UAAU,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;AAEtDA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEN,eADD;AAELO,IAAAA,OAAO,EAAEH,MAAM,CAACI;AAFX,GAAD,CAAR,CAFsD,CAMtD;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACH,CAtBM","sourcesContent":["import axios from \"axios\"\n\nimport {\n    ADDRESS_REQUEST,\n    ADDRESS_REQUEST_SUCCESS,\n    ADDRESS_REQUEST_FAIL\n} from \"../types/AddressType\"\n\n\nexport const getAddress = (values) => async (dispatch) => {\n\n    dispatch({\n        type: ADDRESS_REQUEST,\n        payload: values.departure\n    })\n    // try {const reqOne = axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${firstAddress}&size=1`);\n    // const reqTwo = axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${secondAddress}%2016&size=1`);\n    \n    //     const { ...data } = await axios.all([reqOne, reqTwo])\n\n    //     dispatch({\n    //         type: ADDRESS_REQUEST_SUCCESS,\n    //         payload: data\n    //     })\n\n    // } catch (error) {\n    //     dispatch({\n    //         type: ADDRESS_REQUEST_FAIL,\n    //         payload: error\n    //     })\n    // }\n}"]},"metadata":{},"sourceType":"module"}