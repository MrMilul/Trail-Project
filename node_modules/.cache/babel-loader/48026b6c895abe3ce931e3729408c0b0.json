{"ast":null,"code":"import axios from \"axios\";\nimport { ADDRESS_REQUEST, ADDRESS_REQUEST_SUCCESS, ADDRESS_REQUEST_FAIL } from \"../types/AddressType\";\nexport const getAddress = values => async dispatch => {\n  dispatch({\n    type: ADDRESS_REQUEST\n  });\n\n  try {\n    const reqOne = axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${values.firstAddress}&size=1`);\n    const reqTwo = axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${values.secondAddress}%2016&size=1`);\n    const { ...data\n    } = await axios.all([reqOne, reqTwo]);\n    dispatch({\n      type: ADDRESS_REQUEST_SUCCESS,\n      payload: data,\n      departureTime: values.departureTime,\n      departureDate: values.departureDate\n    });\n  } catch (error) {\n    dispatch({\n      type: ADDRESS_REQUEST_FAIL,\n      payload: error\n    });\n  }\n};","map":{"version":3,"sources":["/home/mrmilul/Documents/WebProg/trial assignment/trail/src/redux/actions/AddressCompAction.js"],"names":["axios","ADDRESS_REQUEST","ADDRESS_REQUEST_SUCCESS","ADDRESS_REQUEST_FAIL","getAddress","values","dispatch","type","reqOne","get","firstAddress","reqTwo","secondAddress","data","all","payload","departureTime","departureDate","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,eADJ,EAEIC,uBAFJ,EAGIC,oBAHJ,QAIO,sBAJP;AAOA,OAAO,MAAMC,UAAU,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;AAEtDA,EAAAA,QAAQ,CAAC;AACLC,IAAAA,IAAI,EAAEN;AADD,GAAD,CAAR;;AAIA,MAAI;AAAC,UAAMO,MAAM,GAAGR,KAAK,CAACS,GAAN,CAAW,uDAAsDJ,MAAM,CAACK,YAAa,SAArF,CAAf;AACL,UAAMC,MAAM,GAAGX,KAAK,CAACS,GAAN,CAAW,uDAAsDJ,MAAM,CAACO,aAAc,cAAtF,CAAf;AAEI,UAAM,EAAE,GAAGC;AAAL,QAAc,MAAMb,KAAK,CAACc,GAAN,CAAU,CAACN,MAAD,EAASG,MAAT,CAAV,CAA1B;AAEAL,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,uBADD;AAELa,MAAAA,OAAO,EAAEF,IAFJ;AAGLG,MAAAA,aAAa,EAAEX,MAAM,CAACW,aAHjB;AAILC,MAAAA,aAAa,EAAEZ,MAAM,CAACY;AAJjB,KAAD,CAAR;AAOH,GAZD,CAYE,OAAOC,KAAP,EAAc;AACZZ,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEJ,oBADD;AAELY,MAAAA,OAAO,EAAEG;AAFJ,KAAD,CAAR;AAIH;AACJ,CAxBM","sourcesContent":["import axios from \"axios\"\n\nimport {\n    ADDRESS_REQUEST,\n    ADDRESS_REQUEST_SUCCESS,\n    ADDRESS_REQUEST_FAIL\n} from \"../types/AddressType\"\n\n\nexport const getAddress = (values) => async (dispatch) => {\n\n    dispatch({\n        type: ADDRESS_REQUEST,\n\n    })\n    try {const reqOne = axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${values.firstAddress}&size=1`);\n    const reqTwo = axios.get(`https://api.digitransit.fi/geocoding/v1/search?text=${values.secondAddress}%2016&size=1`);\n    \n        const { ...data } = await axios.all([reqOne, reqTwo])\n\n        dispatch({\n            type: ADDRESS_REQUEST_SUCCESS,\n            payload: data,\n            departureTime: values.departureTime,\n            departureDate: values.departureDate\n        })\n\n    } catch (error) {\n        dispatch({\n            type: ADDRESS_REQUEST_FAIL,\n            payload: error\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}